version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

# commands:
#   destroy-environment:
#     description: Destroy backend and frontend cloudformation stacks given a workflow ID.
#     ...

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd frontend && npm i
      - run: cd frontend && npm run lint
      - save_cache:
          key: "npm-front-packages"
          paths:
            - /frontend/node_modules
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "npm-front-packages"
      - run: cd frontend && npm i
      - run: cd frontend && npm run test
  analyze-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "npm-front-packages"
      - run: cd frontend && npm audit --audit-level=critical
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd backend && npm i
      - run: cd backend && npm run lint
      - save_cache:
          key: "npm-back-packages"
          paths:
            - /backend/node_modules
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "npm-back-packages"
      - run: cd backend && npm i
      - run: cd backend && npm run test
  analyze-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "npm-back-packages"
      - run: cd backend && npm audit --audit-level=critical
  create-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: mkdir /tmp/workspace
      - run:
          name: create backend
          command: |
            cd .circleci/files
            aws cloudformation deploy --template-file backend.yml \
              --stack-name "backend--stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="backend-deployment-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: get backend public url
          command: |            
            aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-deployment-${CIRCLE_WORKFLOW_ID:0:7}" \
             --query "Reservations[*].Instances[*].[PublicDnsName]" --output text | tee /tmp/workspace/backend_url.txt      
      - run:
          name: create frontend
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7}" 
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - restore_cache:
          keys:
            - "npm-back-packages"
      - run:
            name: migrate db
            command: |            
              cd backend
              npm run migrations | tee /tmp/workspace/db-migration-log.txt
  save-files:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - db-migration-log.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - backend_url.txt
  configure-infrastructure:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["aa:81:14:df:30:45:ca:43:bd:d2:28:03:38:3a:fc:c9"]
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible
        - run:
            name: Create ansible inventory
            command: |
              cat /tmp/workspace/backend_url.txt >> .circleci/ansible/inventory.txt
              echo .circleci/ansible/inventory.txt
        - run:
            name: Configure server
            command: |
              cd .circleci/ansible/
              ansible-playbook -i inventory.txt playbook.yml

#  deploy-infrastructure:

#  configure-infrastructure:

#  run-migrations:

#  deploy-frontend:

#  deploy-backend:  

#  smoke-test:

#  cloudfront-update:

workflows:
  frontend:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - analyze-frontend:
          requires:
            - test-frontend
      - analyze-backend:
          requires:
            - test-backend
      - create-infrastructure:
          requires:
            - analyze-frontend
            - analyze-backend
      - run-migrations:
          requires:
            - create-infrastructure
      - save-files:
          requires:
            - run-migrations
      - configure-infrastructure:
          requires:
            - save-files
