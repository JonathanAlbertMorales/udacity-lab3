version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

# commands:
#   destroy-environment:
#     description: Destroy backend and frontend cloudformation stacks given a workflow ID.
#     ...

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd frontend && npm i
      - run: cd frontend && npm run lint
      - save_cache:
          key: "frontend-packages"
          paths:
            - /frontend/node_modules
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "frontend-packages"
      - run: cd frontend && npm i
      - run: cd frontend && npm run test
  analyze-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "frontend-packages"
      - run: cd frontend && npm audit --audit-level=critical
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd backend && npm i
      - run: cd backend && npm run lint
      - save_cache:
          key: "backend-packages"
          paths:
            - backend/node_modules
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "backend-packages"
      - run: cd backend && npm i
      - run: cd backend && npm run test
  analyze-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "backend-packages"
      - run: cd backend && npm audit --audit-level=critical
  create-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: mkdir /tmp/workspace
      - run:
          name: create backend
          command: |
            cd .circleci/files
            aws cloudformation deploy --template-file backend.yml \
              --stack-name "backend--stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="deployment-${CIRCLE_WORKFLOW_ID:0:7}"   
      - run:
          name: save backend url
          command: | 
              curl -H "Content-Type: text/plain" -H "token: c5c72391-6f79-4966-be00-c6c4d4c2ef3d" --request PUT --data "$(aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name, Values=backend-deployment-${CIRCLE_WORKFLOW_ID:0:7}" --output=text)" https://api.memstash.io/values/backend-url 
      - run:
          name: create frontend
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7}" 
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - restore_cache:
          keys:
            - "backend-packages"
      - run:
            name: Creating environment file for backend
            command: |
              echo -e "NODE_ENV=production\nVERSION=1\nTYPEORM_CONNECTION=${TYPEORM_CONNECTION}\nTYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR} \nTYPEORM_ENTITIES=${TYPEORM_ENTITIES}\nTYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}\nTYPEORM_HOST=${TYPEORM_HOST}\nTYPEORM_PORT=${TYPEORM_PORT}\nTYPEORM_USERNAME=${TYPEORM_USERNAME}\nTYPEORM_PASSWORD=${TYPEORM_PASSWORD}\nTYPEORM_DATABASE=${TYPEORM_DATABASE}\nENVIRONMENT=production" > ./backend/.env
              cat backend/.env        
      - run:
            name: migrate db
            command: |            
              cd backend
              npm run migrations | tee /tmp/workspace/db-migration-log.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
              - db-migration-log.txt
  configure-infrastructure:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["aa:81:14:df:30:45:ca:43:bd:d2:28:03:38:3a:fc:c9"]
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible
              apk --no-cache add curl 
        - run:
            name: Create ansible inventory
            command: |
              echo [all] > .circleci/ansible/inventory.txt
              curl -H "token: c5c72391-6f79-4966-be00-c6c4d4c2ef3d" --request GET https://api.memstash.io/values/backend-url  >> .circleci/ansible/inventory.txt 
              cat .circleci/ansible/inventory.txt
        - run:
            name: Configure server
            command: |
              cat .circleci/ansible/inventory.txt
              export ANSIBLE_HOST_KEY_CHECKING=False && ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/playbook.yml
        - run:
            name: export backend url for front end
            command: |
               export API_URL=$(curl -H "token: c5c72391-6f79-4966-be00-c6c4d4c2ef3d" --request GET https://api.memstash.io/values/backend-url)
               echo "API_URL=http://$API_URL:3030" >>  frontend/.env
               cat frontend/.env
        - restore_cache:
            keys:
              - "frontend-packages"
        - run:
            name: build frontend
            command: cd frontend && npm run build
        - persist_to_workspace:
            root: /tmp/workspace
            paths:
              - ./frontend/dist
  deploy-backend:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["aa:81:14:df:30:45:ca:43:bd:d2:28:03:38:3a:fc:c9"]
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible
              apk --no-cache add curl 
        - run:
            name: Create ansible inventory
            command: |
              echo [all] > .circleci/ansible/inventory.txt
              curl -H "token: c5c72391-6f79-4966-be00-c6c4d4c2ef3d" --request GET https://api.memstash.io/values/backend-url  >> .circleci/ansible/inventory.txt 
              cat .circleci/ansible/inventory.txt
        - run:
            name: Configure server
            command: |
              cat .circleci/ansible/inventory.txt
              export ANSIBLE_HOST_KEY_CHECKING=False && ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/roles/deploy/playbook.yml   
  deploy-frontend:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: add tar
            command: yum install -y tar gzip
        - attach_workspace:
            at: /tmp/workspace
        - run:
            name: deploy to s3 bucket
            command: |
              aws s3 cp /tmp/workspace/frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
#  deploy-infrastructure:

#  configure-infrastructure:

#  run-migrations:

#  deploy-frontend:

#  deploy-backend:  

#  smoke-test:

#  cloudfront-update:

workflows:
  frontend:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - analyze-frontend:
          requires:
            - test-frontend
      - analyze-backend:
          requires:
            - test-backend
      - create-infrastructure:
          requires:
            - analyze-frontend
            - analyze-backend
      - configure-infrastructure:
          requires:
            - create-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-backend:
          requires:
            - run-migrations
      - deploy-frontend:
          requires:
            - run-migrations

