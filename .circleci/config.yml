version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:


commands:
  destroy-environment:
    description: Destroy the backend and frontend cloudformation stacks
    steps:
      - run:
          name: destroy environment
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "backend-stack-${CIRCLE_WORKFLOW_ID:0:7}"
          
  revert-migration:
    description: revert the last migration
    steps:
      - run:
          name: revert migrations
          when: on_fail
          command: |
              if [ -f /tmp/workspace/db-migration-log.txt ]; then
                cd backend
                npm install
                npm run migration:revert
              else
                echo "migration was not done"
              fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd frontend && npm i
      - run: cd frontend && npm run lint
      - save_cache:
          key: "frontend-packages-npm"
          paths:
            - frontend/node_modules
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "frontend-packages-npm"
      - run: cd frontend && npm i
      - run: cd frontend && npm run test
  analyze-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "frontend-packages-npm"
      - run: cd frontend && npm audit --audit-level=critical
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: echo -e "NODE_ENV=production\nVERSION=1\nTYPEORM_CONNECTION=${TYPEORM_CONNECTION}\nTYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR} \nTYPEORM_ENTITIES=${TYPEORM_ENTITIES}\nTYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}\nTYPEORM_HOST=${TYPEORM_HOST}\nTYPEORM_PORT=${TYPEORM_PORT}\nTYPEORM_USERNAME=${TYPEORM_USERNAME}\nTYPEORM_PASSWORD=${TYPEORM_PASSWORD}\nTYPEORM_DATABASE=${TYPEORM_DATABASE}\nENVIRONMENT=production" > ./backend/.env
      - run: cd backend && npm i
      - run: cd backend && npm run lint
      - run: cd backend && npm run build
      - save_cache:
          key: "backend-packages"
          paths:
            - backend/node_modules
      - run: mkdir /tmp/workspace
      - run:
          name: save backend build
          command: |
            ls -la
            cd backend
            npm install
            tar -zcvf /tmp/workspace/backend.tar.gz ./
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - backend.tar.gz
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "backend-packages"
      - run: cd backend && npm i
      - run: cd backend && npm run test
  analyze-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "backend-packages"
      - run: cd backend && npm audit --audit-level=critical
  create-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: create backend
          command: |
            cd .circleci/files
            aws cloudformation deploy --template-file backend.yml \
              --stack-name "backend-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="deployment-${CIRCLE_WORKFLOW_ID:0:7}"   
      - run:
          name: save backend url
          command: | 
              curl -H "Content-Type: text/plain" -H "token: c5c72391-6f79-4966-be00-c6c4d4c2ef3d" --request PUT --data "$(aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name, Values=backend-deployment-${CIRCLE_WORKFLOW_ID:0:7}" --output=text)" https://api.memstash.io/values/backend-url 
      - run:
          name: create frontend
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7}" 
      - destroy-environment
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install PIP
          command: sudo apt-get install python-pip python-dev
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - attach_workspace:
          at: /tmp/workspace
      - restore_cache:
          keys:
            - "backend-packages"
      - run:
            name: Creating environment file for backend
            command: |
              echo -e "NODE_ENV=production\nVERSION=1\nTYPEORM_CONNECTION=${TYPEORM_CONNECTION}\nTYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR} \nTYPEORM_ENTITIES=${TYPEORM_ENTITIES}\nTYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}\nTYPEORM_HOST=${TYPEORM_HOST}\nTYPEORM_PORT=${TYPEORM_PORT}\nTYPEORM_USERNAME=${TYPEORM_USERNAME}\nTYPEORM_PASSWORD=${TYPEORM_PASSWORD}\nTYPEORM_DATABASE=${TYPEORM_DATABASE}\nENVIRONMENT=production" > ./backend/.env
              cat backend/.env        
      - run:
            name: migrate db
            command: |            
              cd backend
              npm run migrations | tee /tmp/workspace/db-migration-log.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
              - db-migration-log.txt
      - destroy-environment
  configure-backend:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - attach_workspace:
            at: /tmp/workspace
        - add_ssh_keys:
            fingerprints: ["aa:81:14:df:30:45:ca:43:bd:d2:28:03:38:3a:fc:c9"]
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible
              apk --no-cache add curl
              pip install awscli 
        - run:
            name: Create ansible inventory
            command: |
              echo [all] > .circleci/ansible/inventory.txt
              curl -H "token: c5c72391-6f79-4966-be00-c6c4d4c2ef3d" --request GET https://api.memstash.io/values/backend-url  >> .circleci/ansible/inventory.txt 
              cat .circleci/ansible/inventory.txt
        - run:
            name: Configure server
            command: |
              cat .circleci/ansible/inventory.txt
              export ANSIBLE_HOST_KEY_CHECKING=False && ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/playbook.yml
        - destroy-environment
        - revert-migration
  configure-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - attach_workspace:
            at: /tmp/workspace
        - run:
            name: export backend url for front end
            command: |
               export API_URL=$(curl -H "token: c5c72391-6f79-4966-be00-c6c4d4c2ef3d" --request GET https://api.memstash.io/values/backend-url)
               echo "API_URL=http://$API_URL:3030" >  frontend/.env
               cat frontend/.env
        - restore_cache:
            keys:
              - "frontend-packages-npm"
        - run:
            name: build frontend
            command: | 
              cd frontend && npm update && npm run build
              ls -la
              cp  -r dist  /tmp/workspace/frontend
        - persist_to_workspace:
            root: /tmp/workspace
            paths:
              - frontend
        - destroy-environment
        - revert-migration
  deploy-backend:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["aa:81:14:df:30:45:ca:43:bd:d2:28:03:38:3a:fc:c9"]
        - attach_workspace:
            at: /tmp/workspace
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible
              apk --no-cache add curl 
              pip install awscli
        - run:
            name: Create ansible inventory
            command: |
              echo [all] > .circleci/ansible/inventory.txt
              curl -H "token: c5c72391-6f79-4966-be00-c6c4d4c2ef3d" --request GET https://api.memstash.io/values/backend-url  >> .circleci/ansible/inventory.txt 
              cat .circleci/ansible/inventory.txt
        - run:
            name: Configure server
            command: |
              mkdir dist
              cp --recursive /tmp/workspace/backend.tar.gz dist
              ls -la
              cat .circleci/ansible/inventory.txt
              export ANSIBLE_HOST_KEY_CHECKING=False && ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/roles/deploy/playbook.yml
        - destroy-environment
        - revert-migration   
  deploy-frontend:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run: yum install -y tar gzip
        - attach_workspace:
            at: /tmp/workspace
        - run:
            name: deploy to s3 bucket
            command: |
              aws s3 cp --recursive /tmp/workspace/frontend s3://udapeople-frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7}
        - destroy-environment
        - revert-migration
  smoke-tests:
    docker:
        - image: python:3.7-alpine3.11
    steps:
       - run: apk add --update curl
       - run: pip install awscli
       - attach_workspace:
            at: /tmp/workspace
       - run: 
            name: smoke test for frontend
            command: |
              URL="http://udapeople-frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/index.html#/employees"    
              if curl -s --head ${URL}
              then
               return 0
              else
               return 1
              fi
       - run:
          name: smoketest for backend
          command: | 
                API_URL=$(curl -H "token: c5c72391-6f79-4966-be00-c6c4d4c2ef3d" --request GET https://api.memstash.io/values/backend-url)
                curl "http://${API_URL}:3030/api/status"
       - destroy-environment
       - revert-migration
  cloudfront-update:
     docker:
       - image: amazon/aws-cli
     steps:
        - checkout
        - run: yum install -y tar gzip
        - attach_workspace:
            at: /tmp/workspace
        - run:
            name: update cloudformation
            command: |
              aws cloudformation deploy --stack-name "cloudfront-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" --template-file .circleci/files/cloudfront.yml --capabilities CAPABILITY_NAMED_IAM
        - run:
            name: delete old stacks of cloudfront, cloudformation, and S3 bucket
            command: |
                export OLD_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
                export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
                aws s3 rb s3://udapeople-frontend-deployment-${OLD_WORKFLOW_ID} --force  --region "us-east-1"
                aws cloudformation delete-stack --stack-name  backend-stack-${OLD_WORKFLOW_ID}
                aws cloudformation delete-stack --stack-name  cloudfront-${OLD_WORKFLOW_ID}
        - destroy-environment
        - revert-migration
  prometheus-exporter:
    docker:
      - image: python:3.7-alpine3.11
    steps: 
      - checkout
      - attach_workspace:
            at: /tmp/workspace 
      - add_ssh_keys:
           fingerprints: ["aa:81:14:df:30:45:ca:43:bd:d2:28:03:38:3a:fc:c9"]
      - run:
          name: install dependencies
          command: |
                apk add --update ansible
                pip install awscli
      - run: 
          name: configure prometheus
          command: |
              apk --no-cache add curl && 
              echo [all] > ~/inventory.txt &&
              curl -H "token: c5c72391-6f79-4966-be00-c6c4d4c2ef3d" --request GET https://api.memstash.io/values/backend_url >> ~/inventory.txt && 
              export ANSIBLE_HOST_KEY_CHECKING=False && ansible-playbook  -i ~/inventory.txt .circleci/ansible/roles/configure-prometheus-node-exporter/playbook.yml
      - destroy-environment
      - revert-migration

workflows:
  frontend:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - analyze-frontend:
          requires:
            - test-frontend
      - analyze-backend:
          requires:
            - test-backend
      - create-infrastructure:
          requires:
            - analyze-frontend
            - analyze-backend
      - configure-backend:
          requires:
            - create-infrastructure
      - run-migrations:
          requires:
            - configure-backend
      - configure-frontend:
          requires:
            - create-infrastructure
      - deploy-backend:
          requires:
            - run-migrations
      - deploy-frontend:
          requires:
            - configure-frontend
      - smoke-tests:
          requires:
            - deploy-frontend
            - deploy-backend
      - cloudfront-update:
          requires:
            - smoke-tests

